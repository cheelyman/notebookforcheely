import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.security.spec.KeySpec;
import java.security.SecureRandom;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class Main {

    private static final String ALGORITHM = "PBKDF2WithHmacSHA256";
    private static final int ITERATION_COUNT = 65536;
    private static final int KEY_LENGTH = 256;
    private static final int SALT_LENGTH = 16;

    public static String generateAESKey(String password, byte[] salt) throws Exception {
        SecretKeyFactory factory = SecretKeyFactory.getInstance(ALGORITHM);
        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, ITERATION_COUNT, KEY_LENGTH);
        SecretKey tmp = factory.generateSecret(spec);
        SecretKey secret = new SecretKeySpec(tmp.getEncoded(), "AES");
        return Base64.getEncoder().encodeToString(secret.getEncoded());
    }

    public static String getPasswordFromAESKey(String aesKeyBase64, byte[] salt) throws Exception {
        byte[] aesKeyBytes = Base64.getDecoder().decode(aesKeyBase64);
        SecretKeyFactory factory = SecretKeyFactory.getInstance(ALGORITHM);
        PBEKeySpec spec = (PBEKeySpec) factory.getKeySpec(new SecretKeySpec(aesKeyBytes, "AES"), PBEKeySpec.class);
        return new String(spec.getPassword());
    }

    public static byte[] generateSalt() {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[SALT_LENGTH];
        random.nextBytes(salt);
        return salt;
    }

    public static void main(String[] args) {
        try {
            String password = "myPassword";
            byte[] salt = generateSalt();
            String aesKey = generateAESKey(password, salt);
            System.out.println("Generated AES Key: " + aesKey);

            String recoveredPassword = getPasswordFromAESKey(aesKey, salt);
            System.out.println("Recovered Password: " + recoveredPassword);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
