package com.github.gzuliyujiang.rsautils;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.security.spec.KeySpec;
import java.util.Base64;

public class AESEncryptionExample {
    private static final int KEY_SIZE = 256; // 密钥大小（以位为单位）
    private static final int IV_SIZE = 12; // 初始化向量大小（以字节为单位）
    private static final int TAG_LENGTH = 128; // GCM 标签长度（以位为单位）
    private static final int SALT_LENGTH = 16; // SALT 长度（以字节为单位）
    private static final String ENCRYPTION_ALGORITHM = "AES/GCM/NoPadding"; // 加密算法

    public static void main(String[] args) {
        try {
            String plaintext = "Hello, World!"; // 要加密的明文

            // 生成随机的Salt
            byte[] salt = generateSalt();

            // 生成密钥
            SecretKey secretKey = generateSecretKey("password", salt);

            // 加密
            byte[] ciphertext = encrypt(plaintext, secretKey);

            // 解密
            String decryptedText = decrypt(ciphertext, secretKey);

            System.out.println("Plaintext: " + plaintext);
            System.out.println("Ciphertext: " + Base64.getEncoder().encodeToString(ciphertext));
            System.out.println("Decrypted text: " + decryptedText);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // 生成随机的Salt
    private static byte[] generateSalt() {
        byte[] salt = new byte[SALT_LENGTH];
        SecureRandom random = new SecureRandom();
        random.nextBytes(salt);
        return salt;
    }

    // 生成密钥
    private static SecretKey generateSecretKey(String password, byte[] salt) throws Exception {
        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 65536, KEY_SIZE);
        SecretKey tmp = factory.generateSecret(spec);
        return new SecretKeySpec(tmp.getEncoded(), "AES");
    }

    // 加密
    private static byte[] encrypt(String plaintext, SecretKey secretKey) throws Exception {
        byte[] iv = generateInitializationVector();
        GCMParameterSpec parameterSpec = new GCMParameterSpec(TAG_LENGTH, iv);
        Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, parameterSpec);
        byte[] ciphertext = cipher.doFinal(plaintext.getBytes(StandardCharsets.UTF_8));

        // 将 IV 与密文合并
        byte[] combined = new byte[iv.length + ciphertext.length];
        System.arraycopy(iv, 0, combined, 0, iv.length);
        System.arraycopy(ciphertext, 0, combined, iv.length, ciphertext.length);

        return combined;
    }

    // 解密
    private static String decrypt(byte[] ciphertext, SecretKey secretKey) throws Exception {
        byte[] iv = new byte[IV_SIZE];
        byte[] encryptedData = new byte[ciphertext.length - IV_SIZE];
        System.arraycopy(ciphertext, 0, iv, 0, IV_SIZE);
        System.arraycopy(ciphertext, IV_SIZE, encryptedData, 0, ciphertext.length - IV_SIZE);

        GCMParameterSpec parameterSpec = new GCMParameterSpec(TAG_LENGTH, iv);
        Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, secretKey, parameterSpec);
        byte[] decryptedData = cipher.doFinal(encryptedData);
        return new String(decryptedData, StandardCharsets.UTF_8);
    }

    // 生成随机的初始化向量
    private static byte[] generateInitializationVector() {
        byte[] iv = new byte[IV_SIZE];
        SecureRandom random = new SecureRandom();
        random.nextBytes(iv);
        return iv;
    }
}

