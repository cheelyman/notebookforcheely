import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

public class HashingExample {
    private static final String HASH_ALGORITHM = "HmacSHA256";

    public static String calculateHash(String data, String symmetricKey) throws NoSuchAlgorithmException, InvalidKeyException {
        // Convert symmetric key to bytes
        byte[] keyBytes = symmetricKey.getBytes(StandardCharsets.UTF_8);

        // Create SecretKeySpec with the key bytes and algorithm
        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, HASH_ALGORITHM);

        // Initialize HMAC with the key spec
        Mac mac = Mac.getInstance(HASH_ALGORITHM);
        mac.init(keySpec);

        // Calculate the hash
        byte[] hashBytes = mac.doFinal(data.getBytes(StandardCharsets.UTF_8));

        // Return the Base64 encoded hash
        return Base64.getEncoder().encodeToString(hashBytes);
    }

    public static void main(String[] args) {
        try {
            String symmetricKey = "YourSymmetricKey";
            String data = "Hello, World!";

            // Calculate the hash
            String hash = calculateHash(data, symmetricKey);
            System.out.println("Hash: " + hash);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

public class TimestampToStringExample {
    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS");

    public static String convertTimestampToString(long timestamp) {
        Instant instant = Instant.ofEpochMilli(timestamp);
        LocalDateTime dateTime = LocalDateTime.ofInstant(instant, ZoneId.systemDefault());
        return dateTime.format(FORMATTER);
    }

    public static void main(String[] args) {
        long timestamp = System.currentTimeMillis(); // Replace with your desired timestamp

        String dateString = convertTimestampToString(timestamp);
        System.out.println("Converted String: " + dateString);
    }
}


