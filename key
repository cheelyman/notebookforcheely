import java.nio.charset.StandardCharsets;
import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.*;

public class AESGCMEncryption {
    private static final int KEY_SIZE = 256;
    private static final int IV_SIZE = 12;
    private static final int TAG_LENGTH = 128;
    private static final int SALT_LENGTH = 16;
    private static final String CHARACTER_SET = "UTF-8";
    private static final String CIPHER_ALGORITHM = "AES/GCM/NoPadding";

    public static byte[] encrypt(String plaintext, String keyString) throws Exception {
        // Generate salt
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[SALT_LENGTH];
        random.nextBytes(salt);

        // Derive key from password using PBKDF2
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        KeySpec keySpec = new PBEKeySpec(keyString.toCharArray(), salt, 65536, KEY_SIZE);
        SecretKey secretKey = keyFactory.generateSecret(keySpec);
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getEncoded(), "AES");

        // Generate IV
        byte[] iv = new byte[IV_SIZE];
        random.nextBytes(iv);

        // Encrypt the plaintext
        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(TAG_LENGTH, iv);
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, gcmParameterSpec);
        byte[] ciphertext = cipher.doFinal(plaintext.getBytes(CHARACTER_SET));

        // Concatenate salt + iv + ciphertext
        byte[] encryptedData = new byte[salt.length + iv.length + ciphertext.length];
        System.arraycopy(salt, 0, encryptedData, 0, salt.length);
        System.arraycopy(iv, 0, encryptedData, salt.length, iv.length);
        System.arraycopy(ciphertext, 0, encryptedData, salt.length + iv.length, ciphertext.length);

        return encryptedData;
    }

    public static String decrypt(byte[] encryptedData, String keyString) throws Exception {
        // Extract salt, iv, and ciphertext from encrypted data
        byte[] salt = new byte[SALT_LENGTH];
        byte[] iv = new byte[IV_SIZE];
        byte[] ciphertext = new byte[encryptedData.length - salt.length - iv.length];
        System.arraycopy(encryptedData, 0, salt, 0, salt.length);
        System.arraycopy(encryptedData, salt.length, iv, 0, iv.length);
        System.arraycopy(encryptedData, salt.length + iv.length, ciphertext, 0, ciphertext.length);

        // Derive key from password using PBKDF2
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        KeySpec keySpec = new PBEKeySpec(keyString.toCharArray(), salt, 65536, KEY_SIZE);
        SecretKey secretKey = keyFactory.generateSecret(keySpec);
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getEncoded(), "AES");

        // Decrypt the ciphertext
        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(TAG_LENGTH, iv);
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, gcmParameterSpec);
        byte[] plaintextBytes = cipher.doFinal(ciphertext);

        return new String(plaintextBytes, CHARACTER_SET);
    }

public static void main(String[] args) throws Exception {
    // 加密和解密的测试数据
    String plaintext = "Hello, World!";
    String keyString = "YourSecretKey123";

    // 加密
    byte[] encryptedData = encrypt(plaintext, keyString);

    // 解密
    String decryptedText = decrypt(encryptedData, keyString);

    // 验证加密和解密结果
    System.out.println("原始文本: " + plaintext);
    System.out.println("解密后文本: " + decryptedText);
    System.out.println("加密前后文本是否匹配: " + plaintext.equals(decryptedText));
}
}
