import javax.crypto.*;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.security.spec.KeySpec;
import java.util.Base64;

public class AESGCMUtil {

    private static final int IV_LEN = 12;
    private static final int TAG_LEN_BIT = 128;
    private static final String PASSWORD = "abcabc";

    public static byte[] generateIV() {
        byte[] iv = new byte[IV_LEN];
        new SecureRandom().nextBytes(iv);
        return iv;
    }

    public static SecretKey deriveKey(String password) {
        SecretKey secret = new SecretKeySpec(password.getBytes(), "AES");
        return secret;
    }

    public static byte[] encrypt(byte[] plaintext, SecretKey key, byte[] iv) {
        byte[] cipherText = null;
        try {
            Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
            GCMParameterSpec parameterSpec = new GCMParameterSpec(TAG_LEN_BIT, iv);
            cipher.init(Cipher.ENCRYPT_MODE, key, parameterSpec);

            cipherText = cipher.doFinal(plaintext);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return cipherText;
    }

    public static byte[] decrypt(byte[] cipherText, SecretKey key, byte[] iv) {
        byte[] decryptedText = null;
        try {
            Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
            GCMParameterSpec parameterSpec = new GCMParameterSpec(TAG_LEN_BIT, iv);
            cipher.init(Cipher.DECRYPT_MODE, key, parameterSpec);

            decryptedText = cipher.doFinal(cipherText);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return decryptedText;
    }
}
