import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.Base64;

/**
 * AES encryption and decryption example.
 */
public class AESEncryptionExample {

    /**
     * Generates a 256-bit AES key.
     *
     * @return The generated key.
     * @throws Exception If an exception occurs during key generation.
     */
    private static SecretKey generateAESKey() throws Exception {
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(256);
        return keyGenerator.generateKey();
    }

    /**
     * Encrypts data using AES-GCM mode.
     *
     * @param data The data to encrypt.
     * @param key The encryption key.
     * @param iv The initialization vector.
     * @param salt The salt value.
     * @return The encrypted data, in the form of a Base64-encoded string.
     * @throws Exception If an exception occurs during encryption.
     */
    private static String encrypt(String data, SecretKey key, byte[] iv, byte[] salt) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
        GCMParameterSpec parameterSpec = new GCMParameterSpec(128, iv);
        SecretKeySpec secretKeySpec = new SecretKeySpec(key.getEncoded(), "AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, parameterSpec);
        byte[] encryptedBytes = cipher.doFinal(data.getBytes(StandardCharsets.UTF_8));
        return Base64.getEncoder().encodeToString(encryptedBytes);
    }

    /**
     * Decrypts data using AES-GCM mode.
     *
     * @param encryptedData The encrypted data, in the form of a Base64-encoded string.
     * @param key The decryption key.
     * @param iv The initialization vector.
     * @param salt The salt value.
     * @return The decrypted data.
     * @throws Exception If an exception occurs during decryption.
     */
    private static String decrypt(String encryptedData, SecretKey key, byte[] iv, byte[] salt) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
        GCMParameterSpec parameterSpec = new GCMParameterSpec(128, iv);
        SecretKeySpec secretKeySpec = new SecretKeySpec(key.getEncoded(), "AES");
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, parameterSpec);
        byte[] encryptedBytes = Base64.getDecoder().decode(encryptedData);
        byte[] decryptedBytes = cipher.doFinal(encryptedBytes);
        return new String(decryptedBytes, StandardCharsets.UTF_8);
    }

    public static void main(String[] args) throws Exception {
        String plaintext = "Hello, AES!";
        // Generate AES key
        SecretKey key = generateAESKey();

        // Generate initialization vector (IV)
        SecureRandom random = new SecureRandom();
        byte[] iv = new byte[12];
        random.nextBytes(iv);

        // Generate salt
        byte[] salt = new byte[16];
        random.nextBytes(salt);

        // Encrypt the plaintext
        String encryptedData = encrypt(plaintext, key, iv, salt);
        System.out.println("Encrypted data: " + encryptedData);

        // Decrypt the encrypted data
        String decryptedData = decrypt(encryptedData, key, iv, salt);
        System.out.println("Decrypted data: " + decryptedData);
    }
}
