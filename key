package org.example;

import javax.crypto.*;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.util.Arrays;
import java.util.Base64;

public class AESGCMExample {
    private static final String ENCRYPT_ALGO = "AES/GCM/NoPadding";
    private static final int TAG_LENGTH_BIT = 128; // must be one of {128, 120, 112, 104, 96}
    private static final int SALT_LENGTH_BYTE = 16;
    private static final int IV_LENGTH_BYTE = 12;
    private static final int KEY_LENGTH_BIT = 256;
    private static final int ITERATION_COUNT = 65536;
    private static final String PASSWORD = "changeit";
    private static final String SECRET_ALGO = "PBKDF2WithHmacSHA512";

    public static String encrypt(String pText) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        byte[] iv = new byte[IV_LENGTH_BYTE];
        SecureRandom secureRandom = new SecureRandom();
        secureRandom.nextBytes(iv);

        byte[] salt = new byte[SALT_LENGTH_BYTE];
        secureRandom.nextBytes(salt);

        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(SECRET_ALGO);
        PBEKeySpec spec = new PBEKeySpec(PASSWORD.toCharArray(), salt, ITERATION_COUNT, KEY_LENGTH_BIT);
        SecretKey tmp = secretKeyFactory.generateSecret(spec);
        SecretKeySpec key = new SecretKeySpec(tmp.getEncoded(), "AES");

        Cipher cipher = Cipher.getInstance(ENCRYPT_ALGO);
        cipher.init(Cipher.ENCRYPT_MODE, key, new GCMParameterSpec(TAG_LENGTH_BIT, iv));
        byte[] cipherText = cipher.doFinal(pText.getBytes());

        byte[] cipherWithIvSalt = new byte[salt.length + iv.length + cipherText.length];
        System.arraycopy(salt, 0, cipherWithIvSalt, 0, salt.length);
        System.arraycopy(iv, 0, cipherWithIvSalt, salt.length, iv.length);
        System.arraycopy(cipherText, 0, cipherWithIvSalt, salt.length + iv.length, cipherText.length);

        return Base64.getEncoder().encodeToString(cipherWithIvSalt);
    }
    public static String decrypt(String cText) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        byte[] decode = Base64.getDecoder().decode(cText.getBytes());

        byte[] salt = Arrays.copyOfRange(decode, 0, SALT_LENGTH_BYTE);

        byte[] iv = Arrays.copyOfRange(decode, SALT_LENGTH_BYTE, SALT_LENGTH_BYTE + IV_LENGTH_BYTE);

        byte[] cipherText = Arrays.copyOfRange(decode, SALT_LENGTH_BYTE + IV_LENGTH_BYTE, decode.length);

        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(SECRET_ALGO);
        PBEKeySpec spec = new PBEKeySpec(PASSWORD.toCharArray(), salt, ITERATION_COUNT, KEY_LENGTH_BIT);
        SecretKey tmp = secretKeyFactory.generateSecret(spec);
        SecretKeySpec key = new SecretKeySpec(tmp.getEncoded(), "AES");

        Cipher cipher = Cipher.getInstance(ENCRYPT_ALGO);
        cipher.init(Cipher.DECRYPT_MODE, key, new GCMParameterSpec(TAG_LENGTH_BIT, iv));
        byte[] plainText = cipher.doFinal(cipherText);

        return new String(plainText);
    }


    public static void main(String[] args) throws Exception {
        String originalText = "Text to be encrypted";
        String encryptedText = encrypt(originalText);
        System.out.println("Encrypted text: " + encryptedText);

        String decryptedText = decrypt(encryptedText);
        System.out.println("Decrypted text: " + decryptedText);
    }

}
