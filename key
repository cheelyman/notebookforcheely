import java.nio.charset.StandardCharsets;
import javax.crypto.*;
import javax.crypto.spec.*;
import java.security.spec.KeySpec;
import javax.crypto.SecretKeyFactory;
import java.util.Base64;

public class AESGCMEncryptor {
    private static final int IV_SIZE = 12;
    private static final int TAG_LENGTH = 128;
    private static final int SALT_LENGTH = 16;
    private static final String CHARACTER_SET = "UTF-8";
    private static final String CIPHER_ALGORITHM = "AES/GCM/NoPadding";

    private AESGCMEncryptor() {
        // Private constructor to prevent instantiation
    }

    public static String encrypt(String plaintext, String keyString) throws Exception {
        byte[] keyBytes = keyString.getBytes(CHARACTER_SET);
        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, "AES");

        // Generate salt and IV
        byte[] salt = generateSalt();
        byte[] iv = generateIV();

        // Encrypt the plaintext
        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(TAG_LENGTH, iv);
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, gcmParameterSpec);
        byte[] ciphertext = cipher.doFinal(plaintext.getBytes(CHARACTER_SET));

        // Concatenate salt + iv + ciphertext
        byte[] encryptedData = new byte[salt.length + iv.length + ciphertext.length];
        System.arraycopy(salt, 0, encryptedData, 0, salt.length);
        System.arraycopy(iv, 0, encryptedData, salt.length, iv.length);
        System.arraycopy(ciphertext, 0, encryptedData, salt.length + iv.length, ciphertext.length);

        // Encode encrypted data as Base64 string
        String encryptedString = Base64.getEncoder().encodeToString(encryptedData);

        return encryptedString;
    }

    public static String decrypt(String encryptedString, String keyString) throws Exception {
        byte[] keyBytes = keyString.getBytes(CHARACTER_SET);
        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, "AES");

        // Decode Base64 string to get encrypted data
        byte[] encryptedData = Base64.getDecoder().decode(encryptedString);

        // Extract salt, iv, and ciphertext from encrypted data
        byte[] salt = new byte[SALT_LENGTH];
        byte[] iv = new byte[IV_SIZE];
        byte[] ciphertext = new byte[encryptedData.length - salt.length - iv.length];
        System.arraycopy(encryptedData, 0, salt, 0, salt.length);
        System.arraycopy(encryptedData, salt.length, iv, 0, iv.length);
        System.arraycopy(encryptedData, salt.length + iv.length, ciphertext, 0, ciphertext.length);

        // Decrypt the ciphertext
        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(TAG_LENGTH, iv);
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, gcmParameterSpec);
        byte[] plaintextBytes = cipher.doFinal(ciphertext);

        return new String(plaintextBytes, CHARACTER_SET);
    }

    private static byte[] generateSalt() {
        byte[] salt = new byte[SALT_LENGTH];
        SecureRandom random = new SecureRandom();
        random.nextBytes(salt);
        return salt;
    }

    private static byte[] generateIV() {
        byte[] iv = new byte[IV_SIZE];
        SecureRandom random = new SecureRandom();
        random.nextBytes(iv);
        return iv;
    }
}
