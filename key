import java.nio.charset.StandardCharsets;
import javax.crypto.*;
import javax.crypto.spec.*;

public class AESGCMEncryption {
    private static final int KEY_SIZE = 256;
    private static final int IV_SIZE = 12;
    private static final int TAG_LENGTH = 128;
    private static final String CHARACTER_SET = "UTF-8";
    private static final String CIPHER_ALGORITHM = "AES/GCM/NoPadding";

    public static byte[] encrypt(String plaintext, String keyString) throws Exception {
        byte[] keyBytes = keyString.getBytes(CHARACTER_SET);
        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, "AES");

        // Generate IV
        SecureRandom random = new SecureRandom();
        byte[] iv = new byte[IV_SIZE];
        random.nextBytes(iv);

        // Encrypt the plaintext
        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(TAG_LENGTH, iv);
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, gcmParameterSpec);
        byte[] ciphertext = cipher.doFinal(plaintext.getBytes(CHARACTER_SET));

        // Concatenate iv + ciphertext
        byte[] encryptedData = new byte[iv.length + ciphertext.length];
        System.arraycopy(iv, 0, encryptedData, 0, iv.length);
        System.arraycopy(ciphertext, 0, encryptedData, iv.length, ciphertext.length);

        return encryptedData;
    }

    public static String decrypt(byte[] encryptedData, String keyString) throws Exception {
        byte[] keyBytes = keyString.getBytes(CHARACTER_SET);
        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, "AES");

        // Extract iv and ciphertext from encrypted data
        byte[] iv = new byte[IV_SIZE];
        byte[] ciphertext = new byte[encryptedData.length - iv.length];
        System.arraycopy(encryptedData, 0, iv, 0, iv.length);
        System.arraycopy(encryptedData, iv.length, ciphertext, 0, ciphertext.length);

        // Decrypt the ciphertext
        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(TAG_LENGTH, iv);
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, gcmParameterSpec);
        byte[] plaintextBytes = cipher.doFinal(ciphertext);

        return new String(plaintextBytes, CHARACTER_SET);
    }

    public static void main(String[] args) throws Exception {
        // Test encryption and decryption
        String plaintext = "Hello, World!";
        String encryptedKeyString = "YourEncryptedKeyString";

        byte[] encryptedData = encrypt(plaintext, encryptedKeyString);
        String decryptedText = decrypt(encryptedData, encryptedKeyString);

        System.out.println("原始文本: " + plaintext);
        System.out.println("解密后文本: " + decryptedText);
        System.out.println("加密前后文本是否匹配: " + plaintext.equals(decryptedText));
    }
}
