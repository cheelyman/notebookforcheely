import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class SymmetricEncryption {
    private static final int SALT_LENGTH = 16;
    private static final int IV_LENGTH = 12;
    private static final int TAG_LENGTH = 16;
    private static final String CIPHER_ALGORITHM = "AES/GCM/NoPadding";
    private static final String SECRET_KEY_ALGORITHM = "AES";
    private static final String CIPHER_ENCODING = "UTF-8";

    public static String decrypt(String encryptedData, String key) throws Exception {
        byte[] data = Base64.getDecoder().decode(encryptedData);

        byte[] salt = new byte[SALT_LENGTH];
        System.arraycopy(data, 0, salt, 0, SALT_LENGTH);

        byte[] iv = new byte[IV_LENGTH];
        System.arraycopy(data, SALT_LENGTH, iv, 0, IV_LENGTH);

        byte[] tag = new byte[TAG_LENGTH];
        System.arraycopy(data, SALT_LENGTH + IV_LENGTH, tag, 0, TAG_LENGTH);

        byte[] text = new byte[data.length - SALT_LENGTH - IV_LENGTH - TAG_LENGTH];
        System.arraycopy(data, SALT_LENGTH + IV_LENGTH + TAG_LENGTH, text, 0, text.length);

        SecretKey secretKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), SECRET_KEY_ALGORITHM);
        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(TAG_LENGTH * 8, iv);
        cipher.init(Cipher.DECRYPT_MODE, secretKey, gcmParameterSpec);
        cipher.updateAAD(tag);
        byte[] decryptedBytes = cipher.doFinal(text);

        return new String(decryptedBytes, CIPHER_ENCODING);
    }

    public static String encrypt(String data, String key) throws Exception {
        byte[] salt = new byte[SALT_LENGTH];
        SecureRandom secureRandom = new SecureRandom();
        secureRandom.nextBytes(salt);

        byte[] iv = new byte[IV_LENGTH];
        secureRandom.nextBytes(iv);

        SecretKey secretKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), SECRET_KEY_ALGORITHM);
        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(TAG_LENGTH * 8, iv);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, gcmParameterSpec);
        byte[] encryptedBytes = cipher.doFinal(data.getBytes(StandardCharsets.UTF_8));

        byte[] result = new byte[SALT_LENGTH + IV_LENGTH + TAG_LENGTH + encryptedBytes.length];
        System.arraycopy(salt, 0, result, 0, SALT_LENGTH);
        System.arraycopy(iv, 0, result, SALT_LENGTH, IV_LENGTH);
        System.arraycopy(cipher.getParameters().getParameterSpec(GCMParameterSpec.class).getIV(), 0, result, SALT_LENGTH + IV_LENGTH, TAG_LENGTH);
        System.arraycopy(encryptedBytes, 0, result, SALT_LENGTH + IV_LENGTH + TAG_LENGTH, encryptedBytes.length);

        return Base64.getEncoder().encodeToString(result);
    }
}
