import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.Base64;

public class SymmetricEncryption {
    private static final int SALT_LENGTH = 16;
    private static final int IV_LENGTH = 12;
    private static final int TAG_LENGTH = 16;
    private static final String CIPHER_ALGORITHM = "AES/GCM/NoPadding";
    private static final String SECRET_KEY_ALGORITHM = "PBKDF2WithHmacSHA512";
    private static final int ITERATION_COUNT = 65536;
    private static final int KEY_LENGTH = 32;
    private static final String HASH_ALGORITHM = "SHA-256";

    public static String encrypt(String data, String secret) throws Exception {
        byte[] salt = generateSalt();
        SecretKey secretKey = generateSecretKey(secret, salt);

        SecureRandom random = new SecureRandom();
        byte[] iv = new byte[IV_LENGTH];
        random.nextBytes(iv);

        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        GCMParameterSpec parameterSpec = new GCMParameterSpec(TAG_LENGTH * 8, iv);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, parameterSpec);

        byte[] encryptedData = cipher.doFinal(data.getBytes(StandardCharsets.UTF_8));
        byte[] encrypted = new byte[salt.length + iv.length + encryptedData.length];
        System.arraycopy(salt, 0, encrypted, 0, salt.length);
        System.arraycopy(iv, 0, encrypted, salt.length, iv.length);
        System.arraycopy(encryptedData, 0, encrypted, salt.length + iv.length, encryptedData.length);

        return Base64.getEncoder().encodeToString(encrypted);
    }

    public static String decrypt(String encryptedData, String secret) throws Exception {
        byte[] encrypted = Base64.getDecoder().decode(encryptedData);

        byte[] salt = new byte[SALT_LENGTH];
        System.arraycopy(encrypted, 0, salt, 0, salt.length);

        byte[] iv = new byte[IV_LENGTH];
        System.arraycopy(encrypted, salt.length, iv, 0, iv.length);

        byte[] data = new byte[encrypted.length - salt.length - iv.length];
        System.arraycopy(encrypted, salt.length + iv.length, data, 0, data.length);

        SecretKey secretKey = generateSecretKey(secret, salt);

        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        GCMParameterSpec parameterSpec = new GCMParameterSpec(TAG_LENGTH * 8, iv);
        cipher.init(Cipher.DECRYPT_MODE, secretKey, parameterSpec);

        byte[] decryptedData = cipher.doFinal(data);
        return new String(decryptedData, StandardCharsets.UTF_8);
    }

    private static byte[] generateSalt() {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[SALT_LENGTH];
        random.nextBytes(salt);
        return salt;
    }

    private static SecretKey generateSecretKey(String secret, byte[] salt) throws Exception {
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(SECRET_KEY_ALGORITHM);
        PBEKeySpec keySpec = new PBEKeySpec(secret.toCharArray(), salt, ITERATION_COUNT, KEY_LENGTH);
        SecretKey secretKey = keyFactory.generateSecret(keySpec);
        return new SecretKeySpec(secretKey.getEncoded(), "AES");
    }

    public static void main(String[] args) {
        try {
            String secretKey = "your_secret_key";
            String originalData = "Hello, World!";

            // 加密数据
            String encryptedData = SymmetricEncryption.encrypt(originalData, secretKey);
            System.out.println("Encrypted Data: " + encryptedData);

            // 解密数据
            String decryptedData = SymmetricEncryption.decrypt(encryptedData, secretKey);
            System.out.println("Decrypted Data: " + decryptedData);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
