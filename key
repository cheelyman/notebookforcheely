import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.SecureRandom;
import java.util.Base64;

public class SymmetricKeyGenerator {
    private static final String SECRET_KEY_ALGORITHM = "PBKDF2WithHmacSHA256";
    private static final int ITERATION_COUNT = 65536;
    private static final int KEY_LENGTH = 256;
    private static final int SALT_LENGTH = 16;

    /**
     * Generates a symmetric key using PBKDF2 algorithm with HMAC SHA-256.
     *
     * @param password the password used for key generation
     * @return the generated symmetric key
     * @throws NoSuchAlgorithmException if the specified algorithm is not available
     * @throws InvalidKeySpecException if the requested key specification is inappropriate
     */
    public static SecretKey generateSymmetricKey(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {
        byte[] salt = generateSalt();

        KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, ITERATION_COUNT, KEY_LENGTH);

        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(SECRET_KEY_ALGORITHM);
        SecretKey secretKey = keyFactory.generateSecret(keySpec);

        return secretKey;
    }

    /**
     * Generates a random salt.
     *
     * @return the generated salt
     */
    private static byte[] generateSalt() {
        byte[] salt = new byte[SALT_LENGTH];
        SecureRandom random = new SecureRandom();
        random.nextBytes(salt);

        return salt;
    }

    /**
     * Encodes the specified symmetric key to Base64 format.
     *
     * @param secretKey the symmetric key to encode
     * @return the Base64-encoded key string
     */
    public static String encodeBase64(SecretKey secretKey) {
        byte[] keyBytes = secretKey.getEncoded();
        return Base64.getEncoder().encodeToString(keyBytes);
    }

    /**
     * Decodes the specified Base64-encoded key string to a symmetric key.
     *
     * @param base64Key the Base64-encoded key string
     * @return the decoded symmetric key
     */
    public static SecretKey decodeBase64(String base64Key) {
        byte[] keyBytes = Base64.getDecoder().decode(base64Key);
        return new SecretKeySpec(keyBytes, SECRET_KEY_ALGORITHM);
    }
}
