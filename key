import javax.crypto.Cipher;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.Base64;

public class SymmetricEncryption {
    private static final int IV_LENGTH = 12;
    private static final int TAG_LENGTH = 128;
    private static final int SALT_LENGTH = 16;
    private static final String CIPHER_ALGORITHM = "AES/GCM/NoPadding";

    public static String encrypt(String data, String key) throws Exception {
        byte[] iv = generateIV();
        byte[] salt = generateSalt();

        SecretKeySpec secretKeySpec = generateSecretKey(key, salt);

        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        GCMParameterSpec parameterSpec = new GCMParameterSpec(TAG_LENGTH, iv);
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, parameterSpec);

        byte[] encryptedData = cipher.doFinal(data.getBytes(StandardCharsets.UTF_8));

        byte[] combined = new byte[salt.length + iv.length + encryptedData.length];
        System.arraycopy(salt, 0, combined, 0, salt.length);
        System.arraycopy(iv, 0, combined, salt.length, iv.length);
        System.arraycopy(encryptedData, 0, combined, salt.length + iv.length, encryptedData.length);

        return Base64.getEncoder().encodeToString(combined);
    }

    public static String decrypt(String encryptedData, String key) throws Exception {
        byte[] combined = Base64.getDecoder().decode(encryptedData);

        byte[] salt = new byte[SALT_LENGTH];
        System.arraycopy(combined, 0, salt, 0, salt.length);

        byte[] iv = new byte[IV_LENGTH];
        System.arraycopy(combined, salt.length, iv, 0, iv.length);

        byte[] data = new byte[combined.length - salt.length - iv.length];
        System.arraycopy(combined, salt.length + iv.length, data, 0, data.length);

        SecretKeySpec secretKeySpec = generateSecretKey(key, salt);

        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        GCMParameterSpec parameterSpec = new GCMParameterSpec(TAG_LENGTH, iv);
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, parameterSpec);

        byte[] decryptedData = cipher.doFinal(data);
        return new String(decryptedData, StandardCharsets.UTF_8);
    }

    private static byte[] generateIV() {
        SecureRandom random = new SecureRandom();
        byte[] iv = new byte[IV_LENGTH];
        random.nextBytes(iv);
        return iv;
    }

    private static byte[] generateSalt() {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[SALT_LENGTH];
        random.nextBytes(salt);
        return salt;
    }

    private static SecretKeySpec generateSecretKey(String key, byte[] salt) throws Exception {
        byte[] keyBytes = key.getBytes(StandardCharsets.UTF_8);

        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, "AES");
        return secretKeySpec;
    }



    public static void main(String[] args) {
        try {
            String key = "your_secret_key";
            String originalData = "Hello, World!";

            // 加密数据
            String encryptedData = SymmetricEncryption.encrypt(originalData, key);
            System.out.println("Encrypted Data: " + encryptedData);

            // 解密数据
            String decryptedData = SymmetricEncryption.decrypt(encryptedData, key);
            System.out.println("Decrypted Data: " + decryptedData);
        } catch (Exception e) {
            e.printStackTrace();
        }

}

}
